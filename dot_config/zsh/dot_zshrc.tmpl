# vim: ft=zsh

{{ if (eq .zshcomp true) }}
################################################################
# Completion
#
# See man zshcompsys
################################################################

source $ZDOTDIR/modules/completion.zsh
{{ end }}

################################################################
# Keybindings
#
# DOCUMENTATION:
#   man zshzle /STANDARD WIDGETS
################################################################

# Enables emacs keybindings
bindkey -e

{{ if (eq .colemak true) }}
# Gives tab selection vim navigation
bindkey -M menuselect 'n' vi-backward-char
bindkey -M menuselect 'e' vi-down-line-or-history
bindkey -M menuselect 'i' vi-up-line-or-history
bindkey -M menuselect 'o' vi-forward-char
{{ end }}

# Edit command in vim with Ctrl + x
autoload edit-command-line
zle -N edit-command-line
bindkey '^x' edit-command-line

#################################################################
# LS_COLORS
#
# Activates LS_COLORS definition
#################################################################

source $HOME/.local/bin/lscolors.sh

#################################################################
# grc
#
# Enables grc support if it is installed.
#################################################################

source $ZDOTDIR/modules/grc.zsh

{{ if (eq .zshabbr true) }}
################################################################
# Abbreviations
#
# NOTE: Should be sourced *after* keybinding definitions.
# Specifically, bindkey -e breaks it.
################################################################

source $ZDOTDIR/modules/abbreviations.zsh
{{ end }}

################################################################
# General options
#
# DOCUMENTATION:
#   man zshparam /WORDCHARS
################################################################

# Don't break terminal when pressing Ctrl + s
stty ixon

{{ if .editor }}
if command -v {{ .editor }} &> /dev/null; then
    export EDITOR={{ .editor }}
fi
{{ end }}

# Enable colors
autoload -U colors && colors

# bat configuration
export BAT_STYLE='plain'

# delta configuration
export DELTA_PAGER='less -R'

# pass configuration
export GPG_TTY=$(tty)
export PASSWORD_STORE_DIR=$XDG_DATA_HOME/pass
export GNUPGHOME="$XDG_CONFIG_HOME"/gnupg

# Cargo automatically installs to .local/bin
export CARGO_INSTALL_ROOT=$HOME/.local

# Includes some characters as parts of words for Ctrl + w
local WORDCHARS=-$'*?.[]~;!#$%^(){}<>'

# Sets wget to keep history in .local/state
alias wget="wget --hsts-file $XDG_STATE_HOME/wget-hsts"

# Initializes zoxide
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init zsh)"
    # Excludes files from zoxide completion
    export _ZO_EXCLUDE_DIRS=$HOME:$XDG_CACHE_HOME/*:$ZDOTDIR/plugins/*:$HOME/.mozilla/:*/.git/
    export _ZO_DATA_DIR="$XDG_STATE_HOME/zoxide"
fi

################################################################
# History options
#
# DOCUMENTATION:
#   man zshbuiltins /history /fc
#   man zshparam /HISTFILE
#   man zshoptions /APPEND_HISTORY
################################################################

# Sets history to output the last 30 entries
alias history='history -30'
# Output the date instead of number for history
alias histdate='fc -lfn'

# Uncomment this if you want history to have the same
# default behavior as in bash
#alias history='history 1'

# Moves history file to state directory
export HISTFILE="$XDG_STATE_HOME/zsh/history"

# Sets max history file size
export HISTSIZE=1000000
# Sets max number of history entries to keep in memory
export SAVEHIST=$HISTSIZE

# Treat '!' specially for expansion.
setopt bang_hist
# Store command execution time in history
setopt extended_history
# Don't record the same command run repeatedly.
setopt hist_ignore_dups
# Don't write entries that start with a space
setopt hist_ignore_space
# Hide superfluous blanks before entry.
setopt hist_reduce_blanks
# Do not store the usage of the history command in history
setopt hist_no_store
# Append to history file rather than rewriting it
setopt inc_append_history_time

################################################################
# Plugins
################################################################

{{ if (and (ne .chezmoi.username "root") (eq .zshplugins true)) }}
source $ZDOTDIR/modules/plugins.zsh

# Allows displaying git status as part of prompt
plugin-load woefe/git-prompt.zsh
plugin-load zdharma-continuum/fast-syntax-highlighting
{{ end }}

################################################################
# Custom functions
################################################################

# Enables colors if GNU coreutils are installed
ls   --version | grep GNU > /dev/null && alias ls='ls --color=auto'
grep --version | grep GNU > /dev/null && alias grep='grep --color=auto'
diff --version | grep GNU > /dev/null && alias diff='diff --color=auto'
alias ip='ip --color=auto'

# Makes tree ignore trash directories
# TODO: Sync with _ZO_EXCLUDE_DIRS
alias tree="tree -I '.cache|.mozilla|.git'"

{{ if (eq .zshabbr true) }}
abbrev cls='clear'
abbrev md='mkdir'

abbrev l='ls'
abbrev ll='ls -l'
abbrev la='ls -a'
abbrev lal='ls -al'
abbrev lla='ls -la'
abbrev lld='ls -ld'
abbrev ldl='ls -dl'

# Dotfile configuration
abbrev chez='chezmoi'

if command -v task &> /dev/null; then
    abbrev t='task'
    abbrev ta='task add'
    abbrev td='task done'
    abbrev tmodlast='task modify $(task +LATEST uuids)'
    abbrev tdep='task add dep:$(task +LATEST uuids)'
fi

if command -v buku &> /dev/null; then
    abbrev b='buku'
    abbrev ba='buku --add'
    abbrev buku-backup='buku -e ~/.local/share/buku/bookmarks.md'
fi
{{ end }}

################################################################
# less configuration
################################################################

# Sets less keybindings file.
export LESSKEYIN="$XDG_CONFIG_HOME/lesskey"

# Disables less history
export LESSHISTFILE=-

# Enable less color support
export LESS='-ix8RmPm'

# Sets pager for man
# TODO: Use nvimpager?
{{ if (eq .manpager "nvim") }}
export MANPAGER='nvim +Man!'
{{ else }}
export MANPAGER='less -ix8RmPm'
{{ end }}

################################################################
# Prompt
#
# DOCUMENTATION:
#   $ZDOTDIR/plugins/git-prompt.zsh/examples/default.zsh
#   man zshmisc /EXPANSION OF PROMPT
#
#   TODO: clean this up
#   https://github.com/xero/dotfiles/blob/master/zsh/.zsh/05-prompt.zsh
################################################################

# Makes prompt more font-compatible
ZSH_THEME_GIT_PROMPT_PREFIX=':'
ZSH_THEME_GIT_PROMPT_SUFFIX=
ZSH_THEME_GIT_PROMPT_SEPARATOR=
ZSH_THEME_GIT_PROMPT_DETACHED="%{$fg_bold[cyan]%}:"
ZSH_THEME_GIT_PROMPT_BRANCH="%{$fg_bold[white]%}"
ZSH_THEME_GIT_PROMPT_UPSTREAM_NO_TRACKING=" %{$fg_bold[red]%}!"
ZSH_THEME_GIT_PROMPT_UPSTREAM_PREFIX=" %{$fg[red]%}(%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_UPSTREAM_SUFFIX="%{$fg[red]%})"
ZSH_THEME_GIT_PROMPT_BEHIND=" ↓"
ZSH_THEME_GIT_PROMPT_AHEAD=" ↑"
ZSH_THEME_GIT_PROMPT_UNMERGED=" %{$fg[red]%}x"
ZSH_THEME_GIT_PROMPT_STAGED=" %{$fg[green]%}o"
ZSH_THEME_GIT_PROMPT_UNSTAGED=" %{$fg[red]%}+"
ZSH_THEME_GIT_PROMPT_UNTRACKED=" ."
ZSH_THEME_GIT_PROMPT_STASHED=" %{$fg[blue]%}s"
ZSH_THEME_GIT_PROMPT_CLEAN=

# Resets any existing prompt
PROMPT=""

# If we're connected to ssh, displays hostname
if ((${#SSH_CLIENT[@]})); then
    PROMPT=$PROMPT"($(hostname)) "
fi

# Sets a red and magenta prompt if root, and blue/green otherwise.
if [ $UID -eq 0 ]; then
    PROMPT=$PROMPT"%B%{$fg[red]%}[%{$fg[magenta]%}%B%1~%b%{$reset_color%}"
else
    PROMPT=$PROMPT"%B%{$fg[blue]%}[%{$fg[green]%}%B%1~%b%{$reset_color%}"
fi

# If gitprompt addon is installed, uses it
if typeset -f gitprompt > /dev/null; then
    PROMPT=$PROMPT'$(gitprompt)'
fi

# Sets a red and magenta prompt if root, and blue/green otherwise.
if [ $UID -eq 0 ]; then
    PROMPT=$PROMPT"%{$fg[red]%}]%{$reset_color%} "
else
    PROMPT=$PROMPT"%{$fg[blue]%}]%{$reset_color%} "
fi

################################################################
# Fortune
################################################################

# My signature fortune | lolcat setup.
if command -v fortune &> /dev/null; then
    if command -v lolcat &> /dev/null; then
        fortune | lolcat
    else
        fortune
    fi
fi

{{ if (eq .tmux true) }}
################################################################
# tmux
################################################################

# Opens in tmux, provided tmux is installed and is not already
# launched.
if command -v tmux &> /dev/null && [ -n "$PS1" ] && [ -z "$TMUX" ]; then
    exec tmux attach || exec tmux new-session
fi
{{ end }}
